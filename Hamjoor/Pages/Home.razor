@page "/"
@using System.Timers
@implements IDisposable
@inject MatchGameModel game

<div class="container p-3">
    <div class="animals row">
        @foreach (var card in game.ShuffledCards)
        {
            <div class="col-3  game-card @card.CssClass" @onclick="@(() => game.SelectCardAsync(card))">
                <span class="card-text">@card.Animal</span>
            </div>
        }
    </div>
    <div class="d-flex flex-column">
        <h2 class="mx-auto">Matches found: <span class="text-success fw-bold">@game.MatchesFound</span></h2>
        <h3 class="mx-auto">Time: <span class="text-danger fw-bold">@game.GameTimeElapsed.TotalSeconds.ToString("0.0s")</span></h3>

        @if (game.GameEnded)
        {
            <button class="btn btn-primary btn-lg mx-auto mb-2" @onclick="game.ResetGame">Play again</button>
        }
        else if (game.LatestCompletionTime.HasValue)
        {
            <p class="mx-auto mb-3">Previous time: <span class="text-danger fw-bold">@game.LatestCompletionTime.Value.ToString("0.0s")</span></p>
        }
    </div>
    <div class="position-absolute bottom-0 start-50 translate-middle-x text-center fw-semibold">Powered By <a class="text-decoration-none" target="_blank" href="https://joorak.com">Joorak.com</a></div>
</div>

@code {
    // Subscribe and respond to the timer
    protected override void OnInitialized() => game.TimerElapsed += OnTimerTick!;
    void OnTimerTick(object sender, ElapsedEventArgs args) => InvokeAsync(StateHasChanged);
    void IDisposable.Dispose() => game.TimerElapsed -= OnTimerTick!;
}